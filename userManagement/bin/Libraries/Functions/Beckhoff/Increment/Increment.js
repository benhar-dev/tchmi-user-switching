var TcHmi;!function(c){var r,e;r=c.Functions||(c.Functions={}),(e=r.Beckhoff||(r.Beckhoff={})).Increment=function(s,t,E,i){null!=t?t instanceof c.Symbol?t.readEx(function(r){if(r.error===c.Errors.NONE){var e=c.ValueConverter.toNumber(r.value);if(null!==e){var o=c.ValueConverter.toNumber(E),n=c.ValueConverter.toNumber(i);(null==o||e<o)&&(null!=n?e+=n:e++),t.write(e,function(r){r.error===c.Errors.NONE?s.success():s.error(r.error,{code:r.error,message:c.Errors[r.error],reason:"Function: Increment, symbol value write failed",domain:"Function",errors:r.details?[r.details]:void 0})})}else s.error(c.Errors.E_PARAMETER_INVALID,{code:c.Errors.E_PARAMETER_INVALID,message:c.Errors[c.Errors.E_PARAMETER_INVALID],reason:"Function: Increment, symbol value is no number.",domain:"Function"})}else s.error(r.error,{code:r.error,message:c.Errors[r.error],reason:"Function: Increment, symbol value read failed",domain:"Function",errors:r.details?[r.details]:void 0})}):s.error(c.Errors.E_PARAMETER_INVALID,{code:c.Errors.E_PARAMETER_INVALID,message:c.Errors[c.Errors.E_PARAMETER_INVALID],reason:"Function: Increment, parameter is no symbol.",domain:"Function"}):s.error(c.Errors.E_PARAMETER_INVALID,{code:c.Errors.E_PARAMETER_INVALID,message:c.Errors[c.Errors.E_PARAMETER_INVALID],reason:"Function: Increment, Requested symbol is not set.",domain:"Function"})},r.registerFrameworkFunction("Increment",e.Increment,"Beckhoff/Increment/Increment.function.json")}(TcHmi=TcHmi||{});